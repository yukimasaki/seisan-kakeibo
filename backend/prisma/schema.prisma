// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  uuid            String        @unique
  email           String        @unique
  userName        String
  membership      String        @default("FREE")
  belongingGroups Member[]
  creators        Transaction[] @relation("creator")
  editors         Transaction[] @relation("editor")
  payments        Payment[]
  lenders         Balance[]     @relation("lender")
  borrowers       Balance[]     @relation("borrower")
  activeGroup     Group?        @relation(fields: [activeGroupId], references: [id])
  activeGroupId   Int?
  Group           Group[]       @relation("creator")
}

model Group {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique
  displayName  String
  creator      User          @relation("creator", fields: [creatorId], references: [id])
  creatorId    Int
  members      Member[]
  categories   Category[]
  transactions Transaction[]
  user         User[]
}

model Member {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@id([userId, groupId])
}

model Category {
  id           Int           @id @default(autoincrement())
  icon         String?
  categoryName String
  group        Group         @relation(fields: [groupId], references: [id])
  groupId      Int
  transaction  Transaction[]
}

model Transaction {
  id          Int        @id @default(autoincrement())
  creator     User       @relation("creator", fields: [creatorId], references: [id])
  creatorId   Int
  editor      User?      @relation("editor", fields: [editorId], references: [id])
  editorId    Int?
  createdAt   DateTime   @default(now())
  editedAt    DateTime?  @updatedAt
  amount      Int
  paymentDate DateTime
  title       String
  memo        String?
  status      String
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  group       Group      @relation(fields: [groupId], references: [id])
  groupId     Int
  payments    Payment[]
  balances    Balance[]
  schedules   Schedule[]
}

model Payment {
  id                   Int         @id @default(autoincrement())
  payer                User        @relation(fields: [payerId], references: [id])
  payerId              Int
  actualPaymentAmount  Int
  defaultPaymentAmount Int
  difference           Int
  method               String
  ratio                Float
  transaction          Transaction @relation(fields: [transactionId], references: [id])
  transactionId        Int
}

model Balance {
  id            Int         @id @default(autoincrement())
  lender        User        @relation("lender", fields: [lenderId], references: [id])
  lenderId      Int
  borrower      User        @relation("borrower", fields: [borrowerId], references: [id])
  borrowerId    Int
  amount        Int
  status        String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
}

model Schedule {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  schedule      String
  enabled       Boolean
}
